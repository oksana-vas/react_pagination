{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","numberOfPages","Math","ceil","pageButtons","isFirstPage","isLastPage","className","cn","disabled","href","onClick","map","page","active","handlePageChange","items","App","useState","setPage","itemsPerPage","setItemsPerPage","firstItem","lastItem","length","visibleItems","id","value","onChange","option","target","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"2MAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,WCIIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QAGI,IAFJC,mBAEI,MAFU,EAEV,EADJC,EACI,EADJA,aAEMC,EAAgBC,KAAKC,KAAKN,EAAQC,GAClCM,EAAcd,EAAW,EAAGW,GAC5BI,EAA8B,IAAhBN,EACdO,EAAaP,IAAgBE,EAoBnC,OACE,mCACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAAa,CAC7BC,SAAUJ,IADZ,SAIE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAxBe,WAClBN,GACHL,EAAaD,EAAc,IAiBvB,oBAWDK,EAAYQ,KAAI,SAAAC,GAAI,OACnB,oBAEEN,UAAWC,IAAG,YAAa,CACzBM,OAAQf,IAAgBc,IAH5B,SAME,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACV,gBAAeR,EACfM,QAAS,kBAhDI,SAACE,GACpBd,IAAgBc,GAClBb,EAAaa,GA8CUE,CAAiBF,IALlC,SAOGA,KAZEA,MAiBT,oBAAIN,UAAWC,IAAG,YAAa,CAC7BC,SAAUH,IADZ,SAIE,mBACE,UAAQ,WACRC,UAAU,YACVG,KAAK,QACL,gBAAeJ,EACfK,QApDe,WAClBL,GACHN,EAAaD,EAAc,IA6CvB,0BC3EJiB,EAAQ1B,EAAW,EAAG,IACzBsB,KAAI,SAAAlB,GAAC,qBAAYA,MAEPuB,EAAgB,WAC3B,MAAwBC,mBAAS,GAAjC,mBAAOL,EAAP,KAAaM,EAAb,KACA,EAAwCD,mBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KAIMC,GAAaT,EAAO,GAAKO,EACzBG,EAAWV,EAAOO,EAAeJ,EAAMQ,OACzCX,EAAOO,EACPJ,EAAMQ,OAEJC,EAAenC,EAAWgC,EAAY,EAAGC,GAS/C,OACE,sBAAKhB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWM,EADX,mBAC0BS,EAAY,EADtC,cAC6CC,EAD7C,eAC4DP,EAAMQ,OADlE,OAIA,sBAAKjB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRmB,GAAG,kBACHnB,UAAU,eACVoB,MAAOP,EACPQ,SAtBkB,SAC1BC,GAEAR,GAAiBQ,EAAOC,OAAOH,OAC/BR,EAAQ,IAaF,SA1ByB,CAAC,EAAG,EAAG,GAAI,IAiClBP,KAAI,SAAAiB,GAAM,OACxB,wBAEEF,MAAOE,EAFT,SAIGA,GAHIA,UASb,uBAAOE,QAAQ,kBAAkBxB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,MAAOmB,EAAMQ,OACb1B,QAASsB,EACTrB,YAAac,EACbb,aAAc,SAAC2B,GACbR,EAAQQ,MAIZ,6BACGF,EAAab,KAAI,SAAAoB,GAAI,OACpB,oBAEE,UAAQ,OAFV,wBAIWA,IAHJA,YCvEjBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.62f3ce09.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (value: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage = 1,\n  onPageChange,\n}) => {\n  const numberOfPages = Math.ceil(total / perPage);\n  const pageButtons = getNumbers(1, numberOfPages);\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === numberOfPages;\n\n  const handlePageChange = (page: number) => {\n    if (currentPage !== page) {\n      onPageChange(page);\n    }\n  };\n\n  const handlePrevButton = () => {\n    if (!isFirstPage) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  const handleNextButton = () => {\n    if (!isLastPage) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={cn('page-item', {\n          disabled: isFirstPage,\n        })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={isFirstPage}\n            onClick={handlePrevButton}\n          >\n            «\n          </a>\n        </li>\n\n        {pageButtons.map(page => (\n          <li\n            key={page}\n            className={cn('page-item', {\n              active: currentPage === page,\n            })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              aria-disabled={isFirstPage}\n              onClick={() => handlePageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n\n        <li className={cn('page-item', {\n          disabled: isLastPage,\n        })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={isLastPage}\n            onClick={handleNextButton}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [page, setPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n\n  const perPageOptions: number[] = [3, 5, 10, 20];\n\n  const firstItem = (page - 1) * itemsPerPage;\n  const lastItem = page * itemsPerPage < items.length\n    ? page * itemsPerPage\n    : items.length;\n\n  const visibleItems = getNumbers(firstItem + 1, lastItem);\n\n  const handlePerPageChange = (\n    option: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setItemsPerPage(+option.target.value);\n    setPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${page} (items ${firstItem + 1} - ${lastItem} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={handlePerPageChange}\n          >\n            {perPageOptions.map(option => (\n              <option\n                key={option}\n                value={option}\n              >\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={itemsPerPage}\n        currentPage={page}\n        onPageChange={(value: number) => {\n          setPage(value);\n        }}\n      />\n\n      <ul>\n        {visibleItems.map(item => (\n          <li\n            key={item}\n            data-cy=\"item\"\n          >\n            {`Item ${item}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}